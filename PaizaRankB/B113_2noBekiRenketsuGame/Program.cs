namespace B113_2noBekiRenketsuGame
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int N = int.Parse(Console.ReadLine().Trim());
            int[] ints = new int[N];
            for (int i = 0; i < N; i++)
            {
                ints[i] = int.Parse(Console.ReadLine());
            }




        }
    }
}


/*
 * B113:2のべき連結ゲーム
 * 
 * あなたは今あるゲームに挑戦しています。
このゲームでは、1 列に並んだ 16 個のマスで構成される盤面上で行われます。

この盤面に順に挿入していく 10,000 個の数字が与えられるので、これを 16 個のマスのいずれかに入れ続けます。これで最後まで 16 個のマスが埋め尽くされなければあなたの勝ちです。

マスに入りうる数はすべて 2 の累乗の値のみです。あなたが数を入れるたびに、以下のようにしてマス内の数が変化します。

・マスを左から順番に見ていったときに、連続した同じ数があったら、それらの数が 2 倍になって連結し、すべての数を左詰めにする。
・この動作を、連続して同じ数がなくなるまで繰り返す。

例えば以下のようになります。



ほかの例を示します。このように同じ数字が 3 つ並んだ場合も、左から順番に同じ数を連結させます。



うまくマスに数字を入れることで、10,000 ターン生き残るプログラムを作成してください。

ただし、次の数を挿入する位置 p を指定する際は、以下のフォーマットに従ってください。

現在盤面上にある数字の数を W とします。このとき、

・p = 0 の場合、盤面の左端に数字が挿入される。
・1 ≦ p ≦ W の場合、今までに盤面に置かれている数字のうち、p 番目の数字の右側に数字を挿入する。
・上記以外の値を指定した場合は、不正な値として扱われる(不正解となる)。

例えば以下のようになります。



評価ポイント
10回のテストケースで、正答率、実行速度、メモリ消費量をはかり得点が決まります。
より早い解答時間で提出したほうが得点が高くなります。
複数のテストケースで正しい出力がされるか評価（+50点）
解答までの速さ評価（+50点）
入力される値
入力は以下のフォーマットで与えられます。

N
A_1
A_2
...
A_N
・1 行目にマス内に入れるべき数字 N(=10,000) が与えられます。
・続く N 行のうちの i 行目 (1 ≦ i ≦ N) には、i ターン目(1 ≦ i ≦ N)にマスに入れるべき数 A_i が与えられます。
・入力は合計で N+1 行となり、入力値最終行の末尾に改行が 1 つ入ります。

それぞれの値は文字列で標準入力から渡されます。標準入力からの値取得方法はこちらをご確認ください
期待する出力
各ターンにどこに数字を入れるかを表す数字を N 個改行区切りで出力してください。
N ターン後までマスが埋め尽くされないような埋め方をしていれば、どのような出力をしてもかまいません。

出力の最後に改行を入れ、余計な文字、空行を含んではいけません。

条件
すべてのテストケースにおいて、以下の条件をみたします。

・A_i = 2 または A_i = 4 (1 ≦ i ≦ N)
・N = 10,000
入力例1
5
4
2
2
2
4
出力例1
0
0
1
1
1
この例では N = 5 となっています。最終的に数字の列は 8, 4, 2 になります。
入力例2
5
2
2
2
2
2
出力例2
0
0
0
0
0
最終的に数字の列は 2, 8 となります。
 */